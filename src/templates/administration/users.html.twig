{% extends 'administration/admin.html.twig' %}

{% block admin_content %}

    {% include 'administration/userForm.html.twig' %}

    <div class="card mb-3" id="usersList">
        <div class="card-header border-light bg-white text-right">
            <button id="userFormButton" class="btn btn-outline-primary btn-sm mt-2" type="button" data-toggle="collapse" data-target="#userFormSection" aria-expanded="false" aria-controls="userFormSection">
                <i class="fas fa-plus"></i>
                Add User
            </button>
        </div>
        <div class="card-body scrollable">
            <table id="userTable" class="tablesorter table table-sm table-hover">
                <thead class="table-borderless">
                    <tr>
                        <th scope="col" class="sortedHeader">#&nbsp;<i class="fa fa-sort"></i>
                        </th>
                        <th scope="col" class="usrFd">Name</th>
                        <th scope="col" class="usrFd">Username</th>
                        <th scope="col" class="usrFd">Email</th>
                        <th scope="col" class="usrFd">Role</th>
                        <th scope="col" class="usrFd">Active</th>
                        <th scope="col"></th>
                        <th scope="col"></th>
                        <th scope="col"></th>
                    </tr>
                </thead>
                <tbody class="form-control-sm js-user-list">
                    {% for user in users %}
                        <tr>
                            <td scope='row'>{{ user.user_id }}</td>
                            <td>
                                <input type="text" name="username" value="{{ user.username }}">
                            </td>
                            <td>{{ user.username }}</td>
                            <td>
                                <input type="email" name="email" value="{{ user.email }}">
                            </td>
                            <td>
                                <select name="role_id" class="form-control form-control-sm">
                                    {% for role in roles %}
                                        <option value="{{ role.role_id }}" {{ role.role_id == user.role_id ? "selected" }}>{{ role.name }}</option>
                                    {% endfor %}
                                </select>
                            </td>
                            <td class="text-center">
                                <input name="active" type="checkbox" {{ user.active ? 'checked' }}>
                            </td>
                            <td>
                                <a href="{{ baseUrl }}/admin/userMgr/editPassword" class="js-open-modal" data-id="{{ user.user_id }}" title="Edit Password">
                                    <i class='fas fa-edit'></i>
                                </a>
                            </td>

                            <td>
                                <a href="{{ baseUrl }}/UserPermission/show/{{ user.user_id }}" class="js-open-modal" title="Collection Privileges" $privhidden>
                                    <i class='fas fa-tasks'></i>
                                </a>
                            </td>

                            <td>
                                <input type="color" name="color" alt="Tag color" value="{{ user.color is empty ? default_color : user.color }}">
                            </td>
                        </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
        <div class="row">
            <div class="col-md-12">
                <nav aria-label="pagination">
                    <ul class="pagination justify-content-center mt-3">
                        {% for page in range(1, pages) %}
                            <li class="page-item {{ currentPage == page ? 'active' }}">
                                <a class="page-link" href="{{ baseUrl }}/admin/users/{{ page }}">
                                    {{ page }}
                                </a>
                            </li>
                        {% endfor %}
                    </ul>
                </nav>
            </div>
        </div>
    </div>
{% endblock %}

{% block scripts %}
    {{ parent() }}

    <script>
        $(function () {
            $("#userTable").tablesorter({
                sortList: [
                    [0]
                ],
                headers: {
                    '.usrFd': {
                        sorter: false
                    }
                }
            });
        });

        $(function () {
            'use strict';

            /* Save users list */
            $('.js-user-list').on('change', 'input, select, textarea', function () {
                saveFormList($(this), 'api/admin/userMgr/save');
            });

            $("#userFormSection").on('shown.bs.collapse', function () {
                $("#usersList").hide();
            }).on('hidden.bs.collapse', function () {
                $("#usersList").show();
            });

            $(document).on('click', '#saveButton', function () {
                $('#passwordForm').submit();
            });

            document.querySelectorAll('[type=password]').forEach(function (elem) {
                elem.addEventListener('keyup', function () {
                    document.getElementById('user_new_pwd2').setCustomValidity('');
                    if ($('#user_new_pwd2').val() !== $('#user_new_pwd1').val()) {
                        document.getElementById('user_new_pwd2').setCustomValidity('Passwords do not match.');
                    }
                });
            });

            $(document).on('submit', '#passwordForm', function (e) {
                e.preventDefault();

                if (this.checkValidity() === false) {
                    e.stopPropagation();
                } else {
                    $.ajax({type: 'POST', url: '{{ baseUrl }}/api/admin/userMgr/save', data: $(this).serialize()}).done(function (response) {
                        showAlert(response.message);
                        $('#modal-div').modal('hide');
                    }).fail(function (response) {
                        if (response.responseJSON.errorCode === 1) {
                            $(this).removeClass('was-validated');
                            $('#admin_pwd').addClass('is-invalid');
                        }
                    });
                }

                this.classList.add('was-validated');
            });

            $('#userForm').submit(function (e) {
                e.preventDefault();

                if (this.checkValidity() === false) {
                    e.stopPropagation();
                } else {
                    postRequest('{{ baseUrl }}/api/admin/userMgr/save', $(this).serialize(), false, false, function () {
                        location.reload();
                    });
                }
                this.classList.add('was-validated');
            });
        });
    </script>
{% endblock %}
